apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.0"

    defaultConfig {
        applicationId "com.example.newsapp"
        minSdkVersion 18
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

android {
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'com.google.android.material:material:1.0.0'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
}

task checkstyle(type: Checkstyle) {
    include "**/*.java"
    ignoreFailures = false
    showViolations = true
    project.checkstyle.toolVersion = '6.9'
    configFile file("${projectDir}/tools/checkstyle/chromium-style-5.0.xml")
    classpath = files()
    source fileTree('src')
    reports {
        xml {
            destination file("${buildDir}/reports/checkstyle/checkstyle.xml")
        }
        html {
            stylesheet resources.text.fromFile("${projectDir}/tools/checkstyle/checkstyle.xsl")
            destination file("${buildDir}/reports/checkstyle/checkstyle.html")
        }
    }
}

task checkstyleChanged(type: Checkstyle) {
    def changedFiles = getChangedFiles()
    if (changedFiles.size() == 0) {
        println "There is no changed files. Drop checkstyle."
        return
    }
    println "Changed files: " + changedFiles
    include changedFiles
    ignoreFailures = false
    showViolations = true
    project.checkstyle.toolVersion = '6.9'
    configFile file("${projectDir}/tools/checkstyle/chromium-style-5.0.xml")
    classpath = files()
    source fileTree('src')
    reports {
        xml {
            destination file("${buildDir}/reports/checkstyle/checkstyle_changed.xml")
        }
        html {
            stylesheet resources.text.fromFile("${projectDir}/tools/checkstyle/checkstyle.xsl")
            destination file("${buildDir}/reports/checkstyle/checkstyle_changed.html")
        }
    }
}

/**
 * Get all files that are changed by the last commit.
 *
 * @return list of all changed files
 */
def getChangedFiles() {
    def outputStream = new ByteArrayOutputStream()
    def command = "git log -1 --name-only --oneline"
    command.execute().waitForProcessOutput(outputStream, System.err)
    def files = outputStream.toString().trim().split('\n')
    outputStream.close()
    List<String> fileList = new ArrayList<>()
    def prefix = "src/"
    def suffix = ".java"
    for (file in files) {
        if (file.startsWith(prefix) && file.endsWith(suffix)) {
            fileList.add(file.substring(prefix.length()))
        }
    }
    return fileList
}

preBuild.dependsOn('checkstyle')